[tool.ruff]
target-version = "py311"
line-length = 88
# Enable unsafe fixes for maximum automation
unsafe-fixes = true

[tool.ruff.lint]
select = [
  # Core rules from replaced tools
  "E",    # pycodestyle errors (replaces flake8 E codes)
  "W",    # pycodestyle warnings (replaces flake8 W codes)
  "F",    # Pyflakes (replaces flake8 F codes)
  "I",    # isort (import sorting)
  "D",    # pydocstyle (docstring checks)
  "S",    # flake8-bandit (security)
  "C901", # McCabe complexity (replaces flake8 complexity)

  # Pylint equivalents
  "PLC", # Pylint Convention rules
  "PLE", # Pylint Error rules
  "PLR", # Pylint Refactor rules
  "PLW", # Pylint Warning rules

  # Additional helpful rules
  "B",     # flake8-bugbear (common bugs)
  "A",     # flake8-builtins (shadowing builtins)
  "ASYNC", # flake8-async (async/await best practices)
  "ERA",   # eradicate (commented-out code)
  "FLY",   # flynt (f-string conversions)
  "LOG",   # flake8-logging (logging best practices)
  "PERF",  # Perflint (performance anti-patterns)
  "PTH",   # flake8-use-pathlib (pathlib usage)
  "RET",   # flake8-return (return statement checks)
  "SIM",   # flake8-simplify (code simplification)
  "UP",    # pyupgrade (Python version upgrade syntax)
  "TCH",   # flake8-type-checking (type checking imports)
  "TID",   # flake8-tidy-imports (import conventions)
  "FURB",  # refurb (modernize Python code)
  "RUF",   # Ruff-specific rules
  "SLF",   # flake8-self (private member access)
]

ignore = [
  "D105",   # missing-magic-method-docstring
  "FIX002", # line-contains-todo
  "A002",   # builtin-argument-shadowing (for 'id' parameter)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "PLR2004", # magic values allowed in tests
  "D",       # docstrings not required in tests
  "PLR0914", # too-many-locals allowed in tests (was max-locals=15)
  "PLR0915", # too-many-statements allowed in tests (was max-statements=30)
  "PLR0911", # too-many-return-statements
  "PLR0912", # too-many-branches
  "B017",    # pytest.raises(Exception) allowed in tests
  "S101",    # assert-used (needed in tests)
  "S608",    # SQL injection not a concern in test fixtures
  "A001",    # builtin shadowing allowed in tests (id)
  "PLR0124", # comparison-with-itself allowed for equality tests
  "B007",    # unused-loop-control-variable allowed in tests
  "SIM103",  # return-in-try-except-finally allowed in tests
  "SIM117",  # nested-with allowed in tests
  "RUF001",  # ambiguous-unicode-character allowed in tests
  "S108",    # hardcoded-temp-file allowed in tests
  "PLR0913", # too-many-arguments allowed in test helpers and fixtures
]

"dependency_injection/*" = [
  # These files already have inline disables
  "PLR0917", # too-many-positional-arguments
]

"hooks/*" = [
  # Hook scripts have different requirements
  "D", # docstrings not required
]

"scripts/*" = [
  # Script files have different requirements
  "D",    # docstrings not required
  "S603", # subprocess calls are intentional in this controlled script
]

"src/infrastructure/*" = [
  "PLR0914", # too-many-locals (matching Makefile config)
  "PLR0915", # too-many-statements (database_factory has 16, limit is 15)
]

"src/presentation/*" = [
  "PLR0914", # too-many-locals
  "PLR0915", # too-many-statements
  "PLR0912", # too-many-branches
  "B008",    # function-call-in-default-argument (needed for FastAPI Depends)
  "C901",    # too-complex (error handlers need multiple exception types)
]

"src/application/*" = [
  "PLR0913", # too-many-arguments (commands need multiple parameters)
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Use spaces for indentation
indent-style = "space"

# Unix-style line endings
line-ending = "lf"

[tool.pytest.ini_options]
# Test discovery and execution
# testpaths = ["tests"]  # Commented out to allow pytest to search from project root
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
  "-v",                        # verbose
  "--tb=short",                # shorter tracebacks
  "--strict-markers",          # ensure all markers are registered
  "--cov=.",                   # coverage for entire project root
  "--cov-report=term-missing", # show missing lines in terminal
  "--cov-report=html:htmlcov", # generate HTML coverage report
  "--cov-fail-under=100",      # fail if coverage below 100%
  "-n=auto",                   # run tests in parallel using all available CPU cores
  "--maxfail=5",               # stop after 5 failures to fail fast
]

# Performance optimizations
cache_dir = ".pytest_cache"

# Filter warnings
filterwarnings = [
  "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests that interact with database",
  "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["."] # Use project root for coverage
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/.venv/*",
  "*/venv/*",
  "conftest.py",
  "*/site-packages/*",
  "*/dist-packages/*",
  "*/dependency_injector/*",
  "*.pxd",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
  ".*pass.*",
  "if TYPE_CHECKING:",
]

[tool.pyright]
include = ["src", "tests", "dependency_injection"]
exclude = ["**/node_modules", "**/__pycache__"]

# Use strict mode everywhere
typeCheckingMode = "strict"

# Set python path to include project root for import resolution
pythonPath = ["."]

# Strict type checking options
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportMissingParameterType = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true
reportUnnecessaryCast = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = true

[tool.importlinter]
root_package = "src"

[[tool.importlinter.contracts]]
name = "Domain layer independence"
type = "independence"
modules = ["src.domain"]

[[tool.importlinter.contracts]]
name = "Layered architecture"
type = "layers"
layers = ["src.infrastructure", "src.application", "src.domain"]
