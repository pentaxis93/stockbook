[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pylint."MESSAGES CONTROL"]
# UNIFIED STRICT configuration for all production code
# Only tests have separate configuration due to legitimate test-specific patterns
disable = [
    # Code structure - reasonable for domain models
    "too-many-public-methods", 
    "too-many-instance-attributes",
    
    # Abstract base classes - pass statements are required
    "unnecessary-pass",
    
    # Import organization - handled by isort
    "wrong-import-order",
    "ungrouped-imports",
    
    # Line length - handled by black
    "line-too-long",
    
    # Technical debt and development patterns
    "fixme",  # TODO comments are legitimate
    
    # C extension members - dependency injection frameworks use C extensions
    "c-extension-no-member",
]

# Enable more checks for better code quality
enable = [
    "useless-suppression",  # Find unnecessary pylint disables
    "use-implicit-booleaness-not-comparison",
    "use-implicit-booleaness-not-len",
    "unnecessary-comprehension",
    "unnecessary-dict-index-lookup",
    "unnecessary-list-index-lookup",
]

[tool.pylint.FORMAT]
max-line-length = 88  # Match black and isort

[tool.pylint.DESIGN]
# Balanced complexity limits that allow for rich domain models and comprehensive error handling
max-args = 7          # Up from 5 - allows rich constructors and commands
max-locals = 10       # Up from 8 - allows complex domain operations with multiple intermediate values
max-returns = 3       # Keep current - encourages single responsibility
max-branches = 6      # Up from 4 - allows proper error handling and business logic
max-statements = 15   # Up from 12 - allows complete domain operations without artificial splitting
max-nested-blocks = 3 # Keep current - prevents deep nesting
max-bool-expr = 3     # Keep current - encourages simplification
max-public-methods = 10 # Keep current - promotes interface segregation
max-attributes = 7    # Keep current - encourages composition
max-positional-arguments = 7  # Match max-args for consistency
max-module-lines = 500  # Prevent God modules - forces proper module organization
min-public-methods = 1  # Allow single-method classes for specific use cases like validators

[tool.pylint.BASIC]
# Good naming patterns
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "ui"]
# Allow 'id' to be used as parameter name for entity identifiers
# This provides targeted permission for domain entities to use standard 'id' nomenclature
# while still catching dangerous redefinitions of other built-ins (list, dict, str, etc.)
allowed-redefined-builtins = ["id"]
# Require docstrings for public modules, classes, and functions
docstring-min-length = 10

[tool.pylint.SIMILARITIES]
# Improve duplicate code detection
min-similarity-lines = 8


# Test-specific pylint disable additions
# Since pylint doesn't support config inheritance, we document test-specific
# allowances here and apply them via command line in the Makefile
# Test files need these additional disables on top of production config:
#   - too-few-public-methods: Test classes may have few methods
#   - protected-access: Tests need to verify internal state
#   - redefined-outer-name: Pytest fixtures naturally redefine names
#   - unused-argument: Fixtures are included for side effects
#   - attribute-defined-outside-init: Common pattern in setup_method
#   - too-many-lines: Test files can legitimately be long
#   - duplicate-code: Test patterns often repeat



[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
    "-v",  # verbose
    "--tb=short",  # shorter tracebacks
    "--strict-markers",  # ensure all markers are registered
    "--cov=.",  # coverage for all source code
    "--cov-report=term-missing",  # show missing lines in terminal
    "--cov-report=html:htmlcov",  # generate HTML coverage report
    "--dist=worksteal",  # better load balancing for parallel execution
    "--maxfail=5",  # stop after 5 failures to fail fast
]

# Performance optimizations
cache_dir = ".pytest_cache"

# Filter warnings
filterwarnings = [
    "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that interact with database", 
    "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "conftest.py",
    "*/site-packages/*",
    "*/dist-packages/*",
    "*/dependency_injector/*",
    "*.pxd",
    "dependency_injection/*",
    "config.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ".*pass.*",
]

[tool.pyright]
include = ["src", "tests", "dependency_injection"]
exclude = [
    "**/node_modules", 
    "**/__pycache__"
]

# Use strict mode everywhere
typeCheckingMode = "strict"

# Set python path to include project root for import resolution
pythonPath = ["."]

# Strict type checking options
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportMissingParameterType = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true
reportUnnecessaryCast = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = true

# Note: We use Pyright for type checking (see [tool.pyright] section)
# MyPy was removed to avoid conflicts and redundancy


[tool.importlinter]
root_package = "src"

[[tool.importlinter.contracts]]
name = "Domain layer independence"
type = "independence"
modules = ["src.domain"]

[[tool.importlinter.contracts]]
name = "Layered architecture"
type = "layers"
layers = [
    "src.infrastructure",
    "src.application", 
    "src.domain"
]
# Infrastructure layer now added

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104"]  # Module and package docstrings
match-dir = "^(?!tests|migrations|\\.)"
[tool.docstr-coverage]
# Configuration for docstr-coverage
fail-under = 100.0  # Require 100% docstring coverage
skip-magic = false  # Include magic methods (except __init__)
skip-file-doc = false  # Include module docstrings  
skip-init = false  # Include __init__ method docstrings for comprehensive coverage
skip-class-def = false  # Include class definition docstrings
skip-private = false  # Include private method docstrings

[tool.bandit]
# Security scanning configuration
# Unified strict security standards for all code
exclude_dirs = ["/tests", "/.venv", "/venv", "/.pytest_cache", "/.mypy_cache"]
skips = []  # No skipped tests - maximum security coverage
severity = "low"  # Report all severity levels