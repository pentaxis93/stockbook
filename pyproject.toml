[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pylint."MESSAGES CONTROL"]
# DEFAULT configuration - only minimal global disables
# Layer-specific configurations are used by pre-commit hooks for stricter enforcement
disable = [
    # Tools handled by other formatters
    "wrong-import-order",  # Handled by isort
    "ungrouped-imports",   # Handled by isort
    "line-too-long",       # Handled by black
    
    # Minimal necessary disables for any Python code
    "unnecessary-pass",    # Required in abstract methods
]

[tool.pylint.FORMAT]
max-line-length = 88  # Match black and isort

[tool.pylint.DESIGN]
# Be reasonable about complexity but not overly restrictive
max-args = 12  # Domain entities often need many parameters
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-positional-arguments = 8  # Allow more positional args for domain objects

[tool.pylint.BASIC]
# Good naming patterns
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "ui"]
# Allow 'id' to be used as parameter name for entity identifiers
# This provides targeted permission for domain entities to use standard 'id' nomenclature
# while still catching dangerous redefinitions of other built-ins (list, dict, str, etc.)
allowed-redefined-builtins = ["id"]
# Require docstrings for public modules, classes, and functions
docstring-min-length = 10

# Layer-specific configurations
[tool.pylint.core]
# STRICTEST configuration for CORE business logic (domain, application, infrastructure)
# Only disable rules that are genuinely necessary or handled by other tools
disable = [
    # Code structure - reasonable for domain models - FIXED: Converted config classes to dataclasses
    "too-many-public-methods", 
    "too-many-instance-attributes",
    
    # Abstract base classes - pass statements are required
    "unnecessary-pass",
    
    # Import organization - handled by isort
    "wrong-import-order",
    "ungrouped-imports",
    
    # Line length - handled by black
    "line-too-long",
    
    # Domain entities legitimately need many fields - FIXED: Using keyword-only args
    
    # Technical debt and development patterns
    "fixme",  # TODO comments are legitimate in business logic
    
    # Enable better code quality (removed from disable list)
    # "consider-using-f-string",  # Now enabled for better string formatting
    # "consider-using-dict-items",  # Now enabled for better dictionary iteration
    # "unused-import",  # Now enabled for cleaner imports
    # "raise-missing-from",  # Now enabled for better exception chaining
]

# Enable more checks for better code quality
enable = [
    "useless-suppression",  # Find unnecessary pylint disables
    "use-implicit-booleaness-not-comparison",
    "use-implicit-booleaness-not-len",
    "unnecessary-comprehension",
    "unnecessary-dict-index-lookup",
    "unnecessary-list-index-lookup",
]

# Improve duplicate code detection
min-similarity-lines = 8  # Improved: reduced from 10 for better duplicate detection

max-args = 8  # Further reduced from 12
max-locals = 3  # Further reduced from 5
max-returns = 3  # Significantly reduced from 8
max-branches = 5  # Further reduced from 8
max-statements = 10  # Reduced from 15
max-nested-blocks = 3  # New: limit nesting depth
max-bool-expr = 3  # New: limit boolean expression complexity
max-public-methods = 10  # New: force interface segregation
max-attributes = 7  # New: encourage composition over large classes
max-positional-arguments = 8  # Domain entities need many fields
good-names = ["i", "j", "k", "ex", "Run", "_", "id"]
allowed-redefined-builtins = ["id"]
docstring-min-length = 10

[tool.pylint.tests]
# LENIENT configuration for TEST files
# Disable additional rules that are problematic in test contexts
disable = [
    # Production rules (same as default)
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-instance-attributes", 
    "wrong-import-order",
    "ungrouped-imports",
    "line-too-long",
    "no-member",
    # Additional test-specific rules
    "redefined-outer-name",
    "attribute-defined-outside-init",
    "duplicate-code",
    "unused-variable",
    "unused-argument",
    "protected-access",
    "singleton-comparison",
    "pointless-statement",
    "unnecessary-pass",
    "broad-exception-caught",
    "comparison-with-itself",
    "unexpected-keyword-arg",
    "logging-fstring-interpolation",
    "no-else-return",
    "import-outside-toplevel",
    "unnecessary-negation",
    "missing-class-docstring",
    "missing-function-docstring",
    "abstract-class-instantiated",
    "consider-using-with",
    "too-many-arguments",
    "too-many-positional-arguments",
    "fixme",
    "too-many-lines",
    "unused-import",  # Test files legitimately have unused imports
    # "raise-missing-from",  # Now enabled for better exception chaining in tests
]

allowed-redefined-builtins = ["id"]

[tool.pylint.presentation]
# MODERATE configuration for PRESENTATION layer
# More lenient than core but stricter than tests
disable = [
    # Production rules
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-instance-attributes",
    "wrong-import-order",
    "ungrouped-imports", 
    "line-too-long",
    "no-member",
    # UI-specific allowances
    "too-many-arguments",  # UI components often need many parameters
    "too-many-positional-arguments",
    "fixme",  # UI development often has TODOs
    "duplicate-code",  # Similar UI patterns are acceptable
    "import-outside-toplevel",  # Conditional imports for UI frameworks
    "broad-exception-caught",  # UI error handling is often broad
    # "missing-class-docstring",  # Now enabled - controllers should have docstrings
    "consider-using-join",  # UI string concatenation patterns vary
    "reimported",  # UI modules may reimport for different contexts
    # "raise-missing-from",  # Now enabled for better exception chaining
]

# More reasonable complexity for presentation layer
max-args = 6  # Improved: reduced from 8, UI should be well-designed
max-locals = 10  # Improved: reduced from 12 for better organization
max-returns = 8  # Add explicit return limit
max-branches = 15  # Add explicit branch limit
max-statements = 30  # Improved: reduced from 35 for better method design
allowed-redefined-builtins = ["id"]

# Require docstrings for public controller methods (but not UI components)
docstring-min-length = 10

[tool.pylint.config]
# LENIENT configuration for CONFIG files
# Most lenient for configuration and setup code
disable = [
    # All standard disables
    "too-few-public-methods",
    "too-many-public-methods", 
    "too-many-instance-attributes",
    "wrong-import-order",
    "ungrouped-imports",
    "line-too-long",
    "no-member",
    # Config-specific allowances
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "invalid-name",  # Config variables often use different naming
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-locals",
    "import-outside-toplevel",
    "broad-exception-caught",
    "duplicate-code",
    "fixme",
    "global-statement",  # Config files sometimes need globals
    "global-variable-not-assigned",
    "wildcard-import",  # Sometimes used in config for convenience
    # Improved: enable unused-import detection for cleaner config files
    "unused-wildcard-import",
    "c-extension-no-member",  # Dependency injection frameworks use C extensions
    "consider-iterating-dictionary",  # Config files may use .keys() for clarity
]

allowed-redefined-builtins = ["id"]

[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
    "-v",  # verbose
    "--tb=short",  # shorter tracebacks
    "--strict-markers",  # ensure all markers are registered
    "--cov=.",  # coverage for all source code
    "--cov-report=term-missing",  # show missing lines in terminal
    "--cov-report=html:htmlcov",  # generate HTML coverage report
    "--cov-fail-under=84",  # fail if coverage below 84%
    "--dist=worksteal",  # better load balancing for parallel execution
    "--maxfail=5",  # stop after 5 failures to fail fast
]

# Performance optimizations
cache_dir = ".pytest_cache"

# Filter warnings
filterwarnings = [
    "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that interact with database", 
    "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pyright]
include = ["src", "tests", "dependency_injection"]
exclude = [
    "**/node_modules", 
    "**/__pycache__",
    # Strategic exclusion: presentation layer during Streamlitâ†’new UI migration
    "src/presentation/**"
]

# Use strict mode everywhere
typeCheckingMode = "strict"

# Set python path to include project root for import resolution
pythonPath = ["."]

# Strict type checking options
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportMissingParameterType = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true
reportUnnecessaryCast = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
strict_optional = true
explicit_package_bases = true
namespace_packages = true
# Performance optimizations
incremental = true
cache_dir = ".mypy_cache"

# Per-module options for gradual adoption
[[tool.mypy.overrides]]
module = "src.presentation.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "nanoid"
ignore_missing_imports = true

