[tool.ruff]
target-version = "py311"
line-length = 88
# Enable unsafe fixes for maximum automation
unsafe-fixes = true

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins (shadowing builtins)
  "ASYNC", # flake8-async (async/await best practices)
  "ANN",   # flake8-annotations (type annotations)
  "ARG",   # flake8-unused-arguments (unused arguments)
  "B",     # flake8-bugbear (common bugs)
  "BLE",   # flake8-blind-except (blind except)
  "C",     # flake8-comprehensions (list/dict/set comprehensions)
  "COM",   # flake8-commas (trailing commas)
  "D",     # pydocstyle (docstring checks)
  "DTZ",   # flake8-datetimez (datetimez)
  "E",     # pycodestyle errors (replaces flake8 E codes)
  "EM",    # flake8-errmsg (error message formatting)
  "ERA",   # eradicate (commented-out code)
  "F",     # Pyflakes (replaces flake8 F codes)
  "FA",    # flake8-future-annotations (future annotations)
  "FBT",   # flake8-boolean-trap (boolean trap)
  "FLY",   # flynt (f-string conversions)
  "FURB",  # refurb (modernize Python code)
  "G",     # flake8-logging-format (logging format)
  "I",     # isort (import sorting)
  "ICN",   # flake8-import-conventions (import conventions)
  "INP",   # flake8-no-pep420 (module imports)
  "LOG",   # flake8-logging (logging best practices)
  "N",     # pep8-naming (naming conventions)
  "PERF",  # Perflint (performance anti-patterns)
  "PIE",   # flake8-pie (pie)
  "PLC",   # Pylint Convention rules
  "PLE",   # Pylint Error rules
  "PLR",   # Pylint Refactor rules
  "PLW",   # Pylint Warning rules
  "PT",    # flake8-pytest-style (pytest style)
  "PTH",   # flake8-use-pathlib (pathlib usage)
  "PYI",   # flake8-pyi (type annotations)
  "Q",     # flake8-quotes (quotes)
  "RET",   # flake8-return (return statement checks)
  "RSE",   # flake8-raise (raise Exception)
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit (security)
  "T",     # flake8-print (print statements)
  "SIM",   # flake8-simplify (code simplification)
  "SLF",   # flake8-self (private member access)
  "TCH",   # flake8-type-checking (type checking imports)
  "TID",   # flake8-tidy-imports (import conventions)
  "TRY",   # tryceratops (try-except-cleanup)
  "UP",    # pyupgrade (Python version upgrade syntax)
  "W",     # pycodestyle warnings (replaces flake8 W codes)
]

ignore = [
  "A002",   # builtin-argument-shadowing (for 'id' parameter)
  "ANN401", # missing-type-parameters (missing type parameters)
  "D105",   # missing-magic-method-docstring
  "FIX002", # line-contains-todo
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "A001",    # builtin shadowing allowed in tests (id)
  "B007",    # unused-loop-control-variable allowed in tests
  "B017",    # pytest.raises(Exception) allowed in tests
  "D",       # docstrings not required in tests
  "PLR0124", # comparison-with-itself allowed for equality tests
  "PLR0914", # too-many-locals allowed in tests (was max-locals=15)
  "PLR0915", # too-many-statements allowed in tests (was max-statements=30)
  "PLR0911", # too-many-return-statements
  "PLR0912", # too-many-branches
  "PLR0913", # too-many-arguments allowed in test helpers and fixtures
  "PLR2004", # magic values allowed in tests
  "RUF001",  # ambiguous-unicode-character allowed in tests
  "S101",    # assert-used (needed in tests)
  "S608",    # SQL injection not a concern in test fixtures
  "SIM103",  # return-in-try-except-finally allowed in tests
  "SIM117",  # nested-with allowed in tests
  "S108",    # hardcoded-temp-file allowed in tests
  "TRY301",  # abstract-raise-to-inner-function allowed in tests
]

"scripts/test_all.py" = [
  "S603", # subprocess calls are intentional in this controlled script
]

[tool.pytest.ini_options]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
  "-v",                        # verbose
  "--tb=short",                # shorter tracebacks
  "--strict-markers",          # ensure all markers are registered
  "--cov=.",                   # coverage for entire project root
  "--cov-report=term-missing", # show missing lines in terminal
  "--cov-report=html:htmlcov", # generate HTML coverage report
  "--cov-fail-under=100",      # fail if coverage below 100%
  "-n=auto",                   # run tests in parallel using all available CPU cores
  "--maxfail=5",               # stop after 5 failures to fail fast
]

# Performance optimizations
cache_dir = ".pytest_cache"

# Filter warnings
filterwarnings = [
  "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests that interact with database",
  "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["."] # Use project root for coverage
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/.venv/*",
  "*/venv/*",
  "conftest.py",
  "*/site-packages/*",
  "*/dist-packages/*",
  "*.pxd",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
  ".*pass.*",
  "if TYPE_CHECKING:",
]

[tool.pyright]
include = ["src", "tests", "dependency_injection"]
exclude = ["**/node_modules", "**/__pycache__"]

# Use strict mode everywhere
typeCheckingMode = "strict"

# Set python path to include project root for import resolution
pythonPath = ["."]

# Strict type checking options
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportMissingParameterType = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true
reportUnnecessaryCast = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = true

[tool.importlinter]
root_package = "src"
include_external_packages = true

# ================================================================================
# IMPORT LINTER CONTRACTS FOR CLEAN ARCHITECTURE, DDD, AND TDD
# ================================================================================
# 
# This configuration enforces architectural boundaries and dependencies to maintain
# clean architecture principles, domain-driven design (DDD), and test-driven
# development (TDD) practices.
#
# Contract Organization:
# 1. Core Architecture - Fundamental layered architecture rules (Contracts 1-4)
# 2. Domain Layer - Domain purity and internal structure (Contracts 5-13)
# 3. Application Layer - Use cases and application services (Contracts 14-18, 20)
# 4. Infrastructure Layer - External concerns and implementations (Contracts 21-24)
# 5. Presentation Layer - User interface and external APIs (Contracts 25)
# 6. Cross-Cutting Concerns - Patterns that span multiple layers (Contracts 26-27)
# 7. Test Organization - Testing structure and boundaries (Contracts 28)
#
# Total: 28 enforced contracts (added 3 factory + 2 event-driven contracts)
# ================================================================================

# ===== 1. CORE ARCHITECTURE CONTRACTS =====
# These contracts establish the fundamental layered architecture and ensure
# proper dependency direction from outer layers to inner layers.

# Contract 1: Domain layer must be completely independent
# The domain layer is the core of the application and should have no dependencies
# on any other layer. This ensures the business logic remains pure and testable.
[[tool.importlinter.contracts]]
name = "Domain layer independence"
type = "independence"
modules = ["src.domain"]

# Contract 2: Enforce layered architecture dependencies
# Establishes the onion architecture with proper dependency direction:
# Presentation → Infrastructure → Application → Domain
[[tool.importlinter.contracts]]
name = "Layered architecture"
type = "layers"
layers = [
  "src.presentation",
  "src.infrastructure",
  "src.application",
  "src.domain",
]

# Contract 3: Application layer independence from infrastructure
# Application layer should not depend on infrastructure implementations.
# This enables easier testing and allows infrastructure to be swapped out.
[[tool.importlinter.contracts]]
name = "Application layer independence from infrastructure"
type = "forbidden"
source_modules = ["src.application"]
forbidden_modules = ["src.infrastructure"]

# Contract 4: Application layer independence from presentation
# Application layer should not depend on presentation concerns.
# This ensures use cases are independent of delivery mechanisms.
[[tool.importlinter.contracts]]
name = "Application layer independence from presentation"
type = "forbidden"
source_modules = ["src.application"]
forbidden_modules = ["src.presentation"]

# ===== 2. DOMAIN LAYER CONTRACTS =====
# These contracts ensure domain purity and proper internal structure
# following domain-driven design principles.

# Contract 5: Domain purity - no framework dependencies
# Domain should not use external libraries directly to maintain purity
# and ensure business logic is not coupled to technical concerns.
[[tool.importlinter.contracts]]
name = "Domain purity - no framework dependencies"
type = "forbidden"
source_modules = ["src.domain"]
forbidden_modules = [
  "sqlalchemy",
  "fastapi",
  "pydantic",
  "pytest",
  "httpx",
  "requests",
  "alembic",
  "redis",
  "celery",
  "django",
  "flask",
  "boto3",
  "psycopg2",
  "pymongo",
  "elasticsearch",
  "kafka",
  "rabbitmq",
  "grpc",
  "graphql",
  "dependency_injection",
]

# Contract 6: Value objects independence (foundation layer)
# Value objects are the foundation of the domain and should not depend
# on entities, services, or repositories. They represent immutable concepts.
[[tool.importlinter.contracts]]
name = "Value objects independence"
type = "forbidden"
source_modules = ["src.domain.value_objects"]
forbidden_modules = [
  "src.domain.entities",
  "src.domain.services",
  "src.domain.repositories",
]

# Contract 7: Entities only use value objects
# Entities can use value objects but should not depend on services
# or repositories to maintain proper layering within the domain.
[[tool.importlinter.contracts]]
name = "Entities only use value objects"
type = "forbidden"
source_modules = ["src.domain.entities"]
forbidden_modules = ["src.domain.services", "src.domain.repositories"]

# Contract 8: Entity independence from services
# Entities should not depend on domain services. Services should
# operate on entities, not the other way around.
[[tool.importlinter.contracts]]
name = "Entity independence from services"
type = "forbidden"
source_modules = ["src.domain.entities"]
forbidden_modules = ["src.domain.services"]

# Contract 9: Repository interfaces independence
# Repository interfaces should not depend on domain services.
# They define contracts for persistence without business logic.
[[tool.importlinter.contracts]]
name = "Repository interfaces independence"
type = "forbidden"
source_modules = ["src.domain.repositories"]
forbidden_modules = ["src.domain.services"]

# Contract 10: No circular dependencies between domain services
# Domain services should not have circular dependencies with each other.
# This prevents complex coupling and ensures clear service boundaries.
[[tool.importlinter.contracts]]
name = "No circular dependencies between domain services"
type = "independence"
modules = [
  "src.domain.services.portfolio_calculation_service",
  "src.domain.services.risk_assessment_service",
]


# Contract 12: Aggregate root boundaries
# Entities should not directly reference other aggregate roots.
# This enforces proper aggregate boundaries in DDD.
[[tool.importlinter.contracts]]
name = "Aggregate root boundaries"
type = "forbidden"
source_modules = ["src.domain.entities.stock"]
forbidden_modules = [
  "src.domain.entities.portfolio",
  "src.domain.entities.journal_entry",
  "src.domain.entities.target",
]

# Contract 13: Entity exception handling
# Entities should not use service-level exceptions.
# This maintains proper separation of concerns.
[[tool.importlinter.contracts]]
name = "Entity exception handling"
type = "forbidden"
source_modules = ["src.domain.entities"]
forbidden_modules = ["src.domain.services.exceptions"]

# ===== 3. APPLICATION LAYER CONTRACTS =====
# These contracts ensure proper use case implementation and CQRS patterns.

# Contract 14: Application uses repository interfaces only
# Application should depend on domain interfaces, not infrastructure
# implementations. This enables dependency inversion and easier testing.
[[tool.importlinter.contracts]]
name = "Application uses repository interfaces only"
type = "forbidden"
source_modules = ["src.application"]
forbidden_modules = ["src.infrastructure.repositories"]

# Contract 15: Domain independence from DTOs
# Domain should not depend on application DTOs. DTOs are for data transfer
# between layers, not for domain logic.
[[tool.importlinter.contracts]]
name = "Domain independence from DTOs"
type = "forbidden"
source_modules = ["src.domain"]
forbidden_modules = ["src.application.dto"]

# Contract 16: Commands use services not repositories
# Commands should work through domain services rather than directly
# accessing repositories. This ensures business logic stays in domain.
[[tool.importlinter.contracts]]
name = "Commands use services not repositories"
type = "forbidden"
source_modules = ["src.application.commands"]
forbidden_modules = [
  "src.domain.repositories",
  "src.infrastructure.repositories",
]

# Contract 17: Commands not used in domain or infrastructure
# Commands are application-layer concerns and should not be used
# in domain or infrastructure layers.
[[tool.importlinter.contracts]]
name = "Commands not used in domain or infrastructure"
type = "forbidden"
source_modules = [
  "src.domain",
  "src.infrastructure",
]
forbidden_modules = ["src.application.commands"]

# Contract 18: Application services should not cross-reference
# Application services should operate independently to maintain
# proper separation of use cases and prevent tight coupling.
[[tool.importlinter.contracts]]
name = "Application services independence"
type = "independence"
modules = ["src.application.services"]


# Contract 20: Commands should not directly use DTOs
# Commands should work with domain objects rather than DTOs to maintain
# proper separation between data transfer and business logic.
[[tool.importlinter.contracts]]
name = "Commands independence from DTOs"
type = "forbidden"
source_modules = ["src.application.commands"]
forbidden_modules = ["src.application.dto"]

# ===== 4. INFRASTRUCTURE LAYER CONTRACTS =====
# These contracts ensure proper infrastructure organization and boundaries.

# Contract 21: Infrastructure cannot raise domain events
# Infrastructure should not raise domain events directly. Events should
# be raised by domain entities or services.
[[tool.importlinter.contracts]]
name = "Infrastructure cannot raise domain events"
type = "forbidden"
source_modules = ["src.infrastructure"]
forbidden_modules = ["src.domain.events"]

# Contract 22: Persistence tables independence
# Persistence table definitions should not depend on repository implementations.
# This ensures clean separation of data models from business logic.
[[tool.importlinter.contracts]]
name = "Persistence tables independence"
type = "forbidden"
source_modules = ["src.infrastructure.persistence.tables"]
forbidden_modules = ["src.infrastructure.repositories"]

# Contract 23: Database connection independence
# Database connection and factory should not depend on repositories.
# This maintains proper layering within infrastructure.
[[tool.importlinter.contracts]]
name = "Database connection independence"
type = "forbidden"
source_modules = [
  "src.infrastructure.persistence.database_connection",
  "src.infrastructure.persistence.database_factory",
  "src.infrastructure.persistence.database_initializer",
]
forbidden_modules = ["src.infrastructure.repositories"]


# Contract 21: Repository implementations stay in infrastructure
# Repository implementations should not be used outside of infrastructure
# except through proper dependency injection.
[[tool.importlinter.contracts]]
name = "Repository implementations stay in infrastructure"
type = "forbidden"
source_modules = [
  "src.domain",
  "src.application",
  "src.presentation",
]
forbidden_modules = ["src.infrastructure.repositories"]

# Contract 22: Factory pattern boundaries
# Factory modules should not depend on repository implementations.
# This ensures factories focus on object creation, not data access.
[[tool.importlinter.contracts]]
name = "Factory independence from repositories"
type = "forbidden"
source_modules = ["src.infrastructure.persistence.database_factory"]
forbidden_modules = ["src.infrastructure.repositories"]

# Contract 23: Factory configuration isolation
# Factory modules should not depend on higher-level infrastructure concerns.
# This ensures factories remain focused on their creation responsibilities.
[[tool.importlinter.contracts]]
name = "Factory configuration isolation"
type = "forbidden"
source_modules = ["src.infrastructure.persistence.database_factory"]
forbidden_modules = [
  "src.infrastructure.persistence.unit_of_work",
]

# Contract 24: Database factory independence from business logic
# Database factories should not depend on domain or application layers.
# This ensures factories remain pure infrastructure concerns.
[[tool.importlinter.contracts]]
name = "Database factory independence from business logic"
type = "forbidden"
source_modules = ["src.infrastructure.persistence.database_factory"]
forbidden_modules = [
  "src.domain",
  "src.application",
]

# ===== 5. PRESENTATION LAYER CONTRACTS =====
# These contracts ensure proper presentation layer organization and boundaries.

# Contract 25: Presentation must not use repositories directly
# Presentation should only use application services, not repositories.
# This ensures proper layering and separation of concerns.
[[tool.importlinter.contracts]]
name = "Presentation must not use repositories directly"
type = "forbidden"
source_modules = ["src.presentation"]
forbidden_modules = [
  "src.domain.repositories",
  "src.infrastructure.repositories",
]

# ===== 6. CROSS-CUTTING CONCERNS =====
# These contracts handle patterns that span multiple layers.

# Contract 26: Event handling patterns (future-proofing)
# When event handlers are implemented, they should follow proper boundaries.
# This contract ensures application-level event handling stays independent.
# Note: Contracts 26-27 reserved for future event handler implementation.

# Contract 26: Event publishing boundaries
# Only domain entities and application services should publish events.
# This ensures events originate from appropriate business contexts.
[[tool.importlinter.contracts]]
name = "Event publishing boundaries"
type = "forbidden"
source_modules = [
  "src.infrastructure",
  "src.presentation",
]
forbidden_modules = ["src.domain.events"]

# Contract 27: Domain events stay in domain and application
# Domain events should only be used by domain and application layers.
# Infrastructure and presentation should not directly handle domain events.
[[tool.importlinter.contracts]]
name = "Domain events stay in domain and application"
type = "forbidden"
source_modules = [
  "src.infrastructure",
  "src.presentation",
]
forbidden_modules = ["src.domain.events"]

# ===== 7. TEST ORGANIZATION CONTRACTS =====
# These contracts ensure proper test organization and boundaries.

# Contract 28: Source code independence from tests
# Source code should never import from test modules. This prevents
# test code from becoming part of the production codebase.
[[tool.importlinter.contracts]]
name = "Source code independence from tests"
type = "forbidden"
source_modules = ["src"]
forbidden_modules = ["tests", "fixtures"]

