[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pylint."MESSAGES CONTROL"]
# DEFAULT configuration - only minimal global disables
# Layer-specific configurations are used by pre-commit hooks for stricter enforcement
disable = [
    # Tools handled by other formatters
    "wrong-import-order",  # Handled by isort
    "ungrouped-imports",   # Handled by isort
    "line-too-long",       # Handled by black
    
    # Minimal necessary disables for any Python code
    "unnecessary-pass",    # Required in abstract methods
]

[tool.pylint.FORMAT]
max-line-length = 88  # Match black and isort

[tool.pylint.DESIGN]
# Be reasonable about complexity but not overly restrictive
max-args = 12  # Domain entities often need many parameters
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-positional-arguments = 8  # Allow more positional args for domain objects

[tool.pylint.BASIC]
# Good naming patterns
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "ui"]
# Require docstrings for public modules, classes, and functions
docstring-min-length = 10

[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
    "-v",  # verbose
    "--tb=short",  # shorter tracebacks
    "--strict-markers",  # ensure all markers are registered
    "--cov=.",  # coverage for all source code
    "--cov-report=term-missing",  # show missing lines in terminal
    "--cov-report=html:htmlcov",  # generate HTML coverage report
    "--cov-fail-under=80",  # fail if coverage below 80%
]

# Filter warnings
filterwarnings = [
    "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that interact with database", 
    "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]