[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pylint."MESSAGES CONTROL"]
# DEFAULT configuration - only minimal global disables
# Layer-specific configurations are used by pre-commit hooks for stricter enforcement
disable = [
    # Tools handled by other formatters
    "wrong-import-order",  # Handled by isort
    "ungrouped-imports",   # Handled by isort
    "line-too-long",       # Handled by black
    
    # Minimal necessary disables for any Python code
    "unnecessary-pass",    # Required in abstract methods
]

[tool.pylint.FORMAT]
max-line-length = 88  # Match black and isort

[tool.pylint.DESIGN]
# Be reasonable about complexity but not overly restrictive
max-args = 12  # Domain entities often need many parameters
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-positional-arguments = 8  # Allow more positional args for domain objects

[tool.pylint.BASIC]
# Good naming patterns
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "ui"]
# Allow 'id' to be used as parameter name for entity identifiers
# This provides targeted permission for domain entities to use standard 'id' nomenclature
# while still catching dangerous redefinitions of other built-ins (list, dict, str, etc.)
allowed-redefined-builtins = ["id"]
# Require docstrings for public modules, classes, and functions
docstring-min-length = 10

# Layer-specific configurations
[tool.pylint.core]
# STRICTEST configuration for CORE business logic (domain, application, infrastructure)
# Only disable rules that are genuinely necessary or handled by other tools
disable = [
    # Code structure - reasonable for domain models
    "too-few-public-methods",
    "too-many-public-methods", 
    "too-many-instance-attributes",
    
    # Abstract base classes - pass statements are required
    "unnecessary-pass",
    
    # Import organization - handled by isort
    "wrong-import-order",
    "ungrouped-imports",
    
    # Line length - handled by black
    "line-too-long",
    
    # Domain entities legitimately need many fields
    "too-many-positional-arguments",
    
    # Technical debt and development patterns
    "fixme",  # TODO comments are legitimate in business logic
]

# Improve duplicate code detection
min-similarity-lines = 10  # Require at least 10 lines for duplicate detection (was unlimited)

max-args = 12  # Exception classes need context parameters
max-locals = 10  # Improved: reduced from 12 for better function design
max-returns = 8  # Allow reasonable branching in business logic
max-branches = 10  # Improved: reduced from 12 for simpler logic
max-statements = 30  # Improved: reduced from 40 to encourage smaller methods
max-positional-arguments = 8  # Domain entities need many fields
good-names = ["i", "j", "k", "ex", "Run", "_", "id"]
allowed-redefined-builtins = ["id"]
docstring-min-length = 10

[tool.pylint.tests]
# LENIENT configuration for TEST files
# Disable additional rules that are problematic in test contexts
disable = [
    # Production rules (same as default)
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-instance-attributes", 
    "wrong-import-order",
    "ungrouped-imports",
    "line-too-long",
    "no-member",
    # Additional test-specific rules
    "redefined-outer-name",
    "attribute-defined-outside-init",
    "duplicate-code",
    "unused-variable",
    "unused-argument",
    "protected-access",
    "singleton-comparison",
    "pointless-statement",
    "unnecessary-pass",
    "broad-exception-caught",
    "comparison-with-itself",
    "unexpected-keyword-arg",
    "logging-fstring-interpolation",
    "no-else-return",
    "import-outside-toplevel",
    "unnecessary-negation",
    "missing-class-docstring",
    "missing-function-docstring",
    "abstract-class-instantiated",
    "consider-using-with",
    "too-many-arguments",
    "too-many-positional-arguments",
    "fixme",
    "too-many-lines",
    "unused-import",  # Test files legitimately have unused imports
    # Improved: enable raise-missing-from for better exception chaining
]

allowed-redefined-builtins = ["id"]

[tool.pylint.presentation]
# MODERATE configuration for PRESENTATION layer
# More lenient than core but stricter than tests
disable = [
    # Production rules
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-instance-attributes",
    "wrong-import-order",
    "ungrouped-imports", 
    "line-too-long",
    "no-member",
    # UI-specific allowances
    "too-many-arguments",  # UI components often need many parameters
    "too-many-positional-arguments",
    "too-many-locals",  # UI setup code can be verbose
    "fixme",  # UI development often has TODOs
    "duplicate-code",  # Similar UI patterns are acceptable
    "import-outside-toplevel",  # Conditional imports for UI frameworks
    "broad-exception-caught",  # UI error handling is often broad
    "missing-class-docstring",  # UI component classes don't always need docs
    "missing-function-docstring",  # UI helper functions don't always need docs
    "consider-using-join",  # UI string concatenation patterns vary
    "reimported",  # UI modules may reimport for different contexts
]

# More reasonable complexity for presentation layer
max-args = 10  # Improved: further reduced from 12, UI should be well-designed
max-locals = 15  # Improved: reduced from 20, UI should be more organized
max-returns = 8  # Add explicit return limit
max-branches = 15  # Add explicit branch limit
max-statements = 40  # Improved: reduced from 50 for better method design
allowed-redefined-builtins = ["id"]

# Require docstrings for public controller methods (but not UI components)
docstring-min-length = 10

[tool.pylint.config]
# LENIENT configuration for CONFIG files
# Most lenient for configuration and setup code
disable = [
    # All standard disables
    "too-few-public-methods",
    "too-many-public-methods", 
    "too-many-instance-attributes",
    "wrong-import-order",
    "ungrouped-imports",
    "line-too-long",
    "no-member",
    # Config-specific allowances
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "invalid-name",  # Config variables often use different naming
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-locals",
    "import-outside-toplevel",
    "broad-exception-caught",
    "duplicate-code",
    "fixme",
    "global-statement",  # Config files sometimes need globals
    "global-variable-not-assigned",
    "wildcard-import",  # Sometimes used in config for convenience
    # Improved: enable unused-import detection for cleaner config files
    "unused-wildcard-import",
    "c-extension-no-member",  # Dependency injection frameworks use C extensions
    "consider-iterating-dictionary",  # Config files may use .keys() for clarity
]

allowed-redefined-builtins = ["id"]

[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
    "-v",  # verbose
    "--tb=short",  # shorter tracebacks
    "--strict-markers",  # ensure all markers are registered
    "--cov=.",  # coverage for all source code
    "--cov-report=term-missing",  # show missing lines in terminal
    "--cov-report=html:htmlcov",  # generate HTML coverage report
    "--cov-fail-under=80",  # fail if coverage below 80%
]

# Filter warnings
filterwarnings = [
    "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that interact with database", 
    "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pyright]
# Check all core business logic layers except problematic streamlit UI operations
include = [
    "src/infrastructure/persistence",
    "src/infrastructure/repositories", 
    "src/application",
    "src/domain",
    "src/presentation"
]

# Exclude files with streamlit dependencies or type issues
exclude = [
    "src/presentation/adapters/streamlit_ui_operations.py",
    "src/presentation/adapters/streamlit_stock_adapter.py", 
    "src/presentation/coordinators/stock_page_coordinator.py"
]

# Use basic type checking - just catch the most important errors
typeCheckingMode = "basic"