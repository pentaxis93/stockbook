[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pylint."MESSAGES CONTROL"]
# STRICT configuration for PRODUCTION code (non-test files)
# Only disable rules that are genuinely problematic or handled by other tools
disable = [
    # Code structure - these can be overly restrictive for domain models
    "too-few-public-methods",
    "too-many-public-methods", 
    "too-many-instance-attributes",
    
    # Abstract base classes - pass statements are required
    "unnecessary-pass",  # Required in abstract methods
    
    # Import organization - handled by isort
    "wrong-import-order",
    "ungrouped-imports",
    "import-outside-toplevel",  # Sometimes needed to avoid circular imports
    
    # Line length - handled by black
    "line-too-long",
    
    # Temporary architectural issues - TODO: remove these after DB refactor
    "no-member",  # Due to dynamic repository creation
    
    # UI layer patterns - common in presentation code
    "broad-exception-caught",  # UI code often needs to catch all exceptions
    "logging-fstring-interpolation",  # Logger performance not critical in UI
    "consider-using-join",  # String concatenation readability preference
    "redefined-outer-name",  # Common in UI callback patterns
    "reimported",  # Import reuse patterns in UI
    "method-hidden",  # Common in view model patterns with dataclasses
    
    # Dependency injection and framework-specific patterns
    "c-extension-no-member",  # Dependency-injector module introspection
    "raise-missing-from",  # Sometimes clearer without chaining
    "protected-access",  # Common in adapter patterns
    "consider-iterating-dictionary",  # Sometimes .keys() is clearer
    "too-many-positional-arguments",  # Domain entities need many fields
    "duplicate-code",  # Some duplication is acceptable for clarity
    
    # Configuration and helper files
    "fixme",  # TODO comments are acceptable in progress
    "invalid-name",  # Config constants can use UPPER_CASE
    "attribute-defined-outside-init",  # Config classes use dynamic attributes
    "unused-argument",  # Error handlers often have required unused params
    "no-else-return",  # Sometimes clearer with explicit else for readability
    "unused-import",  # Some imports may be for future use or API compatibility
]

[tool.pylint.FORMAT]
max-line-length = 88  # Match black and isort

[tool.pylint.DESIGN]
# Be reasonable about complexity but not overly restrictive
max-args = 12  # Domain entities often need many parameters
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-positional-arguments = 8  # Allow more positional args for domain objects

[tool.pylint.BASIC]
# Good naming patterns
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "ui"]
# Require docstrings for public modules, classes, and functions
docstring-min-length = 10

[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Output and behavior
addopts = [
    "-v",  # verbose
    "--tb=short",  # shorter tracebacks
    "--strict-markers",  # ensure all markers are registered
    "--cov=.",  # coverage for all source code
    "--cov-report=term-missing",  # show missing lines in terminal
    "--cov-report=html:htmlcov",  # generate HTML coverage report
    "--cov-fail-under=80",  # fail if coverage below 80%
]

# Filter warnings
filterwarnings = [
    "ignore:.*PyType_Spec.*tp_new.*deprecated.*:DeprecationWarning",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that interact with database", 
    "unit: marks pure unit tests with no dependencies",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]