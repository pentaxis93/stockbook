"""
Unit tests for RiskAssessmentService.

Tests business logic for comprehensive risk assessment of individual stocks
and portfolios, including various risk metrics and risk management strategies.
"""

from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List

import pytest

from src.domain.entities.stock_entity import StockEntity
from src.domain.services.exceptions import InsufficientDataError
from src.domain.services.risk_assessment_service import (
    RiskAssessmentConfig,
    RiskAssessmentService,
)
from src.domain.services.value_objects.risk_metrics import (
    ConcentrationLevel,
    ConcentrationRisk,
    PortfolioRisk,
    RiskFactor,
    RiskLevel,
    RiskMetrics,
    RiskProfile,
)
from src.domain.value_objects.stock_symbol import StockSymbol
from src.domain.value_objects.money import Money
from src.domain.value_objects.quantity import Quantity


# Test data helpers
def create_test_stock(
    symbol: str,
    price: float,
    grade: str,
    industry: str = "Technology",
    volatility: float = 0.2,
    beta: float = 1.0,
) -> StockEntity:
    """Helper to create test stock with risk attributes."""
    # Map industries to sector + industry_group combinations
    industry_mapping = {
        "Technology": ("Technology", "Software"),
        "Consumer Goods": ("Consumer Goods", "Food & Beverages"),
        "Utilities": ("Energy", "Utilities"),
        "Energy": ("Energy", "Oil & Gas"),
        "Biotech": ("Healthcare", "Biotechnology"),
        "Unknown": (None, None),
    }
    
    sector, industry_group = industry_mapping.get(industry, ("Technology", "Software"))
    
    stock = StockEntity(
        symbol=StockSymbol(symbol),
        name=f"{symbol} Corp",
        sector=sector,
        industry_group=industry_group,
        grade=grade,
    )
    # Add risk attributes that the service expects
    stock.volatility = Decimal(str(volatility))
    stock.beta = Decimal(str(beta))
    stock.current_price = Money(Decimal(str(price)), "USD")
    # Add industry attribute that the risk service expects
    stock.industry = industry
    # Set a numeric ID (use hash of symbol for consistency)
    stock.set_id(abs(hash(symbol)) % 1000000 + 1)
    return stock


def create_conservative_portfolio():
    """Helper to create a conservative risk portfolio."""
    return [
        (create_test_stock("JNJ", 160.00, "A", "Consumer Goods", 0.15, 0.8), Quantity(20)),
        (create_test_stock("PG", 130.00, "A", "Consumer Goods", 0.18, 0.7), Quantity(15)),
        (create_test_stock("KO", 55.00, "A", "Consumer Goods", 0.20, 0.9), Quantity(30)),
        (create_test_stock("VZ", 40.00, "B", "Utilities", 0.22, 0.6), Quantity(25)),
    ]


def create_aggressive_portfolio():
    """Helper to create a high-risk aggressive portfolio."""
    return [
        (create_test_stock("TSLA", 200.00, "B", "Technology", 0.65, 2.1), Quantity(10)),
        (create_test_stock("NVDA", 300.00, "A", "Technology", 0.55, 1.8), Quantity(8)),
        (create_test_stock("ARKK", 50.00, "C", "Technology", 0.70, 1.5), Quantity(40)),
        (create_test_stock("GME", 20.00, "C", "Consumer Goods", 0.80, 2.5), Quantity(50)),
    ]


def create_concentrated_portfolio():
    """Helper to create a portfolio with concentration risk."""
    return [
        (create_test_stock("AAPL", 150.00, "A", "Technology", 0.30, 1.2), Quantity(100)),  # Large position
        (create_test_stock("MSFT", 250.00, "A", "Technology", 0.25, 1.1), Quantity(10)),   # Small position
        (create_test_stock("GOOGL", 2500.00, "A", "Technology", 0.35, 1.3), Quantity(2)),  # Small position
    ]


def create_test_prices(portfolio: List) -> Dict[str, Money]:
    """Helper to create price dictionary from portfolio."""
    prices = {}
    for stock, _ in portfolio:
        prices[str(stock.symbol)] = stock.current_price
    return prices


class TestRiskAssessmentConfig:
    """Test risk assessment configuration."""

    def test_default_config_creation(self):
        """Should create config with default values."""
        config = RiskAssessmentConfig()
        
        assert config.var_confidence_level == Decimal("0.95")
        assert config.concentration_threshold == Decimal("0.15")
        assert config.high_volatility_threshold == Decimal("0.30")
        assert config.high_beta_threshold == Decimal("1.5")

    def test_custom_config_creation(self):
        """Should create config with custom values."""
        config = RiskAssessmentConfig(
            var_confidence_level=Decimal("0.99"),
            concentration_threshold=Decimal("0.10"),
            high_volatility_threshold=Decimal("0.25"),
            high_beta_threshold=Decimal("2.0"),
        )
        
        assert config.var_confidence_level == Decimal("0.99")
        assert config.concentration_threshold == Decimal("0.10")
        assert config.high_volatility_threshold == Decimal("0.25")
        assert config.high_beta_threshold == Decimal("2.0")


class TestIndividualStockRiskAssessment:
    """Test risk assessment for individual stocks."""

    def test_assess_low_risk_stock(self):
        """Should assess low risk stock correctly."""
        service = RiskAssessmentService()
        
        # Conservative blue-chip stock
        stock = create_test_stock("JNJ", 160.00, "A", "Consumer Goods", 0.15, 0.8)
        
        risk_profile = service.assess_stock_risk(stock)
        
        assert isinstance(risk_profile, RiskProfile)
        assert risk_profile.symbol == stock.symbol
        assert risk_profile.overall_risk_level in [RiskLevel.LOW, RiskLevel.VERY_LOW, RiskLevel.MEDIUM]
        assert risk_profile.volatility_risk == RiskLevel.LOW
        assert risk_profile.beta_risk == RiskLevel.LOW
        assert risk_profile.fundamental_risk == RiskLevel.LOW
        assert risk_profile.sector_risk == RiskLevel.LOW
        assert risk_profile.risk_score < 50  # Should be relatively low risk

    def test_assess_high_risk_stock(self):
        """Should assess high risk stock correctly."""
        service = RiskAssessmentService()
        
        # High volatility, high beta tech stock
        stock = create_test_stock("VLTL", 100.00, "C", "Technology", 0.65, 2.2)
        
        risk_profile = service.assess_stock_risk(stock)
        
        assert risk_profile.overall_risk_level in [RiskLevel.HIGH, RiskLevel.VERY_HIGH]
        assert risk_profile.volatility_risk == RiskLevel.VERY_HIGH  # 0.65 >= 0.5
        assert risk_profile.beta_risk == RiskLevel.VERY_HIGH  # 2.2 >= 2.0
        assert risk_profile.fundamental_risk == RiskLevel.HIGH
        assert risk_profile.sector_risk == RiskLevel.HIGH
        assert risk_profile.risk_score > 60  # Should be high risk score
        assert risk_profile.is_high_risk

    def test_assess_medium_risk_stock(self):
        """Should assess medium risk stock correctly."""
        service = RiskAssessmentService()
        
        # Moderate risk stock
        stock = create_test_stock("MODR", 75.00, "B", "Energy", 0.25, 1.2)
        
        risk_profile = service.assess_stock_risk(stock)
        
        assert risk_profile.overall_risk_level in [RiskLevel.MEDIUM, RiskLevel.LOW, RiskLevel.HIGH]
        assert risk_profile.volatility_risk == RiskLevel.MEDIUM  # 0.25 >= 0.2
        assert risk_profile.beta_risk == RiskLevel.MEDIUM  # 1.2 >= 1.1
        assert risk_profile.fundamental_risk == RiskLevel.MEDIUM
        assert risk_profile.sector_risk == RiskLevel.HIGH  # Energy is high risk sector

    def test_volatility_risk_assessment(self):
        """Should assess volatility risk correctly across different levels."""
        service = RiskAssessmentService()
        
        # Very low volatility
        very_low_vol_stock = create_test_stock("LOWV", 100.00, "A", "Utilities", 0.05, 1.0)
        risk_profile = service.assess_stock_risk(very_low_vol_stock)
        assert risk_profile.volatility_risk == RiskLevel.VERY_LOW
        
        # Low volatility
        low_vol_stock = create_test_stock("LOWVO", 100.00, "A", "Utilities", 0.15, 1.0)
        risk_profile = service.assess_stock_risk(low_vol_stock)
        assert risk_profile.volatility_risk == RiskLevel.LOW
        
        # Medium volatility
        med_vol_stock = create_test_stock("MEDV", 100.00, "A", "Technology", 0.25, 1.0)
        risk_profile = service.assess_stock_risk(med_vol_stock)
        assert risk_profile.volatility_risk == RiskLevel.MEDIUM
        
        # High volatility
        high_vol_stock = create_test_stock("HIGV", 100.00, "A", "Technology", 0.40, 1.0)
        risk_profile = service.assess_stock_risk(high_vol_stock)
        assert risk_profile.volatility_risk == RiskLevel.HIGH
        
        # Very high volatility
        very_high_vol_stock = create_test_stock("VHIGV", 100.00, "A", "Biotech", 0.60, 1.0)
        risk_profile = service.assess_stock_risk(very_high_vol_stock)
        assert risk_profile.volatility_risk == RiskLevel.VERY_HIGH

    def test_beta_risk_assessment(self):
        """Should assess beta risk correctly across different levels."""
        service = RiskAssessmentService()
        
        # Very low beta
        very_low_beta_stock = create_test_stock("LOWB", 100.00, "A", "Utilities", 0.20, 0.5)
        risk_profile = service.assess_stock_risk(very_low_beta_stock)
        assert risk_profile.beta_risk == RiskLevel.VERY_LOW
        
        # Low beta  
        low_beta_stock = create_test_stock("LOWBE", 100.00, "A", "Utilities", 0.20, 0.9)
        risk_profile = service.assess_stock_risk(low_beta_stock)
        assert risk_profile.beta_risk == RiskLevel.LOW
        
        # Medium beta
        med_beta_stock = create_test_stock("MEDB", 100.00, "A", "Technology", 0.20, 1.1)
        risk_profile = service.assess_stock_risk(med_beta_stock)
        assert risk_profile.beta_risk == RiskLevel.MEDIUM
        
        # High beta
        high_beta_stock = create_test_stock("HIGB", 100.00, "A", "Technology", 0.20, 1.7)
        risk_profile = service.assess_stock_risk(high_beta_stock)
        assert risk_profile.beta_risk == RiskLevel.HIGH
        
        # Very high beta
        very_high_beta_stock = create_test_stock("VHIGB", 100.00, "A", "Biotech", 0.20, 2.5)
        risk_profile = service.assess_stock_risk(very_high_beta_stock)
        assert risk_profile.beta_risk == RiskLevel.VERY_HIGH

    def test_fundamental_risk_assessment(self):
        """Should assess fundamental risk based on grade."""
        service = RiskAssessmentService()
        
        # Grade A stock
        grade_a_stock = create_test_stock("GRADA", 100.00, "A", "Technology", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(grade_a_stock)
        assert risk_profile.fundamental_risk == RiskLevel.LOW
        
        # Grade B stock
        grade_b_stock = create_test_stock("GRADB", 100.00, "B", "Technology", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(grade_b_stock)
        assert risk_profile.fundamental_risk == RiskLevel.MEDIUM
        
        # Grade C stock
        grade_c_stock = create_test_stock("GRADC", 100.00, "C", "Technology", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(grade_c_stock)
        assert risk_profile.fundamental_risk == RiskLevel.HIGH
        
        # Ungraded stock
        ungraded_stock = create_test_stock("UNGRD", 100.00, None, "Technology", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(ungraded_stock)
        assert risk_profile.fundamental_risk == RiskLevel.MEDIUM

    def test_sector_risk_assessment(self):
        """Should assess sector risk correctly."""
        service = RiskAssessmentService()
        
        # High risk sector - Technology
        tech_stock = create_test_stock("TECH", 100.00, "A", "Technology", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(tech_stock)
        assert risk_profile.sector_risk == RiskLevel.HIGH
        
        # High risk sector - Biotech
        biotech_stock = create_test_stock("BIOTE", 100.00, "A", "Biotech", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(biotech_stock)
        assert risk_profile.sector_risk == RiskLevel.HIGH
        
        # High risk sector - Energy
        energy_stock = create_test_stock("ENRGY", 100.00, "A", "Energy", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(energy_stock)
        assert risk_profile.sector_risk == RiskLevel.HIGH
        
        # Low risk sector - Utilities
        utilities_stock = create_test_stock("UTILS", 100.00, "A", "Utilities", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(utilities_stock)
        assert risk_profile.sector_risk == RiskLevel.LOW
        
        # Low risk sector - Consumer Goods
        consumer_stock = create_test_stock("CONSU", 100.00, "A", "Consumer Goods", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(consumer_stock)
        assert risk_profile.sector_risk == RiskLevel.LOW
        
        # Medium risk sector - Unknown/Other
        unknown_stock = create_test_stock("UNKNO", 100.00, "A", "Unknown", 0.20, 1.0)
        risk_profile = service.assess_stock_risk(unknown_stock)
        assert risk_profile.sector_risk == RiskLevel.MEDIUM

    def test_risk_factors_collection(self):
        """Should collect risk factors for high-risk stocks."""
        service = RiskAssessmentService()
        
        # High volatility and high beta stock
        risky_stock = create_test_stock("RISKY", 100.00, "C", "Technology", 0.60, 2.0)
        
        risk_profile = service.assess_stock_risk(risky_stock)
        
        assert len(risk_profile.risk_factors) >= 2  # Should have both volatility and beta factors
        
        # Check for high volatility factor
        volatility_factor = next(
            (f for f in risk_profile.risk_factors if f.name == "High Volatility"), None
        )
        assert volatility_factor is not None
        assert volatility_factor.risk_level in [RiskLevel.HIGH, RiskLevel.VERY_HIGH]
        assert len(volatility_factor.mitigation_suggestions) > 0
        
        # Check for high beta factor
        beta_factor = next(
            (f for f in risk_profile.risk_factors if f.name == "High Beta"), None
        )
        assert beta_factor is not None
        assert beta_factor.risk_level in [RiskLevel.HIGH, RiskLevel.VERY_HIGH]
        assert len(beta_factor.mitigation_suggestions) > 0

    def test_risk_factors_not_collected_for_low_risk(self):
        """Should not collect risk factors for low-risk stocks."""
        service = RiskAssessmentService()
        
        # Low volatility, low beta stock
        safe_stock = create_test_stock("SAFE", 100.00, "A", "Utilities", 0.10, 0.7)
        
        risk_profile = service.assess_stock_risk(safe_stock)
        
        # Should have no risk factors since volatility and beta are low
        assert len(risk_profile.risk_factors) == 0


class TestPortfolioRiskAssessment:
    """Test portfolio-level risk assessment."""

    def test_assess_conservative_portfolio_risk(self):
        """Should assess conservative portfolio as low risk."""
        service = RiskAssessmentService()
        portfolio = create_conservative_portfolio()
        prices = create_test_prices(portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(portfolio, prices)
        
        assert isinstance(portfolio_risk, PortfolioRisk)
        assert len(portfolio_risk.individual_stock_risks) == len(portfolio)
        assert portfolio_risk.portfolio_metrics.overall_risk_level in [
            RiskLevel.LOW, 
            RiskLevel.MEDIUM
        ]
        assert isinstance(portfolio_risk.portfolio_metrics, RiskMetrics)
        assert len(portfolio_risk.risk_warnings) >= 0
        assert len(portfolio_risk.mitigation_strategies) >= 0

    def test_assess_aggressive_portfolio_risk(self):
        """Should assess aggressive portfolio as high risk."""
        service = RiskAssessmentService()
        portfolio = create_aggressive_portfolio()
        prices = create_test_prices(portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(portfolio, prices)
        
        assert portfolio_risk.portfolio_metrics.overall_risk_level in [
            RiskLevel.HIGH, 
            RiskLevel.VERY_HIGH
        ]
        assert len(portfolio_risk.risk_warnings) > 0
        assert len(portfolio_risk.mitigation_strategies) > 0
        
        # Should have warnings about high risk
        assert any("risk level is elevated" in warning for warning in portfolio_risk.risk_warnings)

    def test_assess_concentrated_portfolio_risk(self):
        """Should identify concentration risks in portfolio."""
        service = RiskAssessmentService()
        portfolio = create_concentrated_portfolio()
        prices = create_test_prices(portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(portfolio, prices)
        
        # Should identify concentration risks
        concentration_risks = portfolio_risk.portfolio_metrics.concentration_risks
        assert len(concentration_risks) > 0
        
        # Should have high or critical concentration risk
        high_concentration_risks = [
            r for r in concentration_risks 
            if r.concentration_level in [ConcentrationLevel.HIGH, ConcentrationLevel.CRITICAL]
        ]
        assert len(high_concentration_risks) > 0

    def test_empty_portfolio_raises_error(self):
        """Should raise error for empty portfolio."""
        service = RiskAssessmentService()
        
        with pytest.raises(InsufficientDataError) as exc_info:
            service.assess_portfolio_risk([], {})
        
        assert "Cannot assess risk of empty portfolio" in str(exc_info.value)
        assert "portfolio_positions" in exc_info.value.required_data

    def test_portfolio_risk_metrics_calculation(self):
        """Should calculate portfolio risk metrics correctly."""
        service = RiskAssessmentService()
        portfolio = create_conservative_portfolio()
        prices = create_test_prices(portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(portfolio, prices)
        metrics = portfolio_risk.portfolio_metrics
        
        # Check that all required metrics are present
        assert metrics.overall_risk_level is not None
        assert metrics.weighted_beta is not None
        assert metrics.portfolio_volatility is not None
        assert metrics.var_95_percent is not None
        assert metrics.cvar_95_percent is not None
        assert metrics.risk_score is not None
        
        # VaR should be less than CVaR
        assert metrics.var_95_percent.amount < metrics.cvar_95_percent.amount

    def test_sector_risk_assessment(self):
        """Should assess sector concentration risks."""
        service = RiskAssessmentService()
        
        # Create tech-heavy portfolio
        tech_portfolio = [
            (create_test_stock("AAPL", 150.00, "A", "Technology"), Quantity(10)),
            (create_test_stock("GOOGL", 2500.00, "A", "Technology"), Quantity(2)),
            (create_test_stock("MSFT", 250.00, "A", "Technology"), Quantity(8)),
            (create_test_stock("TSLA", 200.00, "B", "Technology"), Quantity(5)),
        ]
        prices = create_test_prices(tech_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(tech_portfolio, prices)
        
        # Should have sector risk assessment
        assert "Technology" in portfolio_risk.sector_risks
        # Technology sector should have some risk level
        assert portfolio_risk.sector_risks["Technology"] is not None

    def test_individual_stock_risks_in_portfolio(self):
        """Should assess individual stock risks within portfolio context."""
        service = RiskAssessmentService()
        portfolio = create_aggressive_portfolio()
        prices = create_test_prices(portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(portfolio, prices)
        
        # Should have individual risk assessments for each stock
        assert len(portfolio_risk.individual_stock_risks) == len(portfolio)
        
        # Each risk profile should be properly formed
        for risk_profile in portfolio_risk.individual_stock_risks:
            assert isinstance(risk_profile, RiskProfile)
            assert risk_profile.symbol is not None
            assert risk_profile.overall_risk_level is not None
            assert risk_profile.risk_score is not None

    def test_risk_warnings_generation(self):
        """Should generate appropriate risk warnings."""
        service = RiskAssessmentService()
        
        # High risk portfolio should generate warnings
        aggressive_portfolio = create_aggressive_portfolio()
        prices = create_test_prices(aggressive_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(aggressive_portfolio, prices)
        
        if portfolio_risk.portfolio_metrics.overall_risk_level in [RiskLevel.HIGH, RiskLevel.VERY_HIGH]:
            assert len(portfolio_risk.risk_warnings) > 0
            assert any("elevated" in warning for warning in portfolio_risk.risk_warnings)

    def test_mitigation_strategies_generation(self):
        """Should generate appropriate mitigation strategies."""
        service = RiskAssessmentService()
        
        # High risk portfolio should generate mitigation strategies
        aggressive_portfolio = create_aggressive_portfolio()
        prices = create_test_prices(aggressive_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(aggressive_portfolio, prices)
        
        if portfolio_risk.portfolio_metrics.overall_risk_level in [RiskLevel.HIGH, RiskLevel.VERY_HIGH]:
            assert len(portfolio_risk.mitigation_strategies) > 0
            assert any("diversification" in strategy for strategy in portfolio_risk.mitigation_strategies)

    def test_concentration_risk_identification(self):
        """Should identify different types of concentration risks."""
        service = RiskAssessmentService()
        
        # Create portfolio with one dominant position
        concentrated_portfolio = [
            (create_test_stock("DOMIN", 1000.00, "A", "Technology"), Quantity(80)),  # 80% of value
            (create_test_stock("SMALL", 100.00, "A", "Technology"), Quantity(10)),    # 10% of value
            (create_test_stock("TINY", 100.00, "A", "Technology"), Quantity(10)),    # 10% of value
        ]
        prices = create_test_prices(concentrated_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(concentrated_portfolio, prices)
        
        # Should identify position concentration risks
        concentration_risks = portfolio_risk.portfolio_metrics.concentration_risks
        position_risks = [r for r in concentration_risks if r.type == "position"]
        
        # Should have at least one position concentration risk
        assert len(position_risks) > 0
        
        # The dominant position should be flagged
        dominant_risks = [r for r in position_risks if "DOMINANT" in r.category]
        assert len(dominant_risks) > 0


class TestRiskAssessmentServiceEdgeCases:
    """Test edge cases and error handling."""

    def test_stock_without_risk_attributes_uses_defaults(self):
        """Should use default values when risk attributes are missing."""
        service = RiskAssessmentService()
        
        # Create stock without volatility and beta attributes
        stock = StockEntity(
            symbol=StockSymbol("NORSK"),
            name="No Risk Corp",
            sector="Technology",
            industry_group="Software",
            grade="B",
        )
        # Add minimal attributes for the risk service
        stock.current_price = Money(Decimal("100.00"), "USD")
        stock.industry = "Technology"
        stock.set_id(123456)
        
        risk_profile = service.assess_stock_risk(stock)
        
        # Should still provide risk assessment with defaults
        assert risk_profile.symbol == stock.symbol
        assert risk_profile.overall_risk_level is not None
        assert risk_profile.volatility_risk is not None
        assert risk_profile.beta_risk is not None

    def test_custom_risk_assessment_config(self):
        """Should use custom configuration for risk assessment."""
        custom_config = RiskAssessmentConfig(
            concentration_threshold=Decimal("0.10"),  # 10% instead of 15%
            high_volatility_threshold=Decimal("0.25"),  # 25% instead of 30%
            high_beta_threshold=Decimal("1.3"),  # 1.3 instead of 1.5
        )
        
        service = RiskAssessmentService(custom_config)
        
        # Test with stock that would be medium risk with default config
        stock = create_test_stock("CUSTM", 100.00, "B", "Technology", 0.28, 1.4)
        
        risk_profile = service.assess_stock_risk(stock)
        
        # With custom thresholds, this should be high volatility and high beta
        assert risk_profile.volatility_risk == RiskLevel.HIGH  # 0.28 > 0.25
        assert risk_profile.beta_risk == RiskLevel.HIGH  # 1.4 > 1.3

    def test_portfolio_with_single_stock(self):
        """Should handle portfolio with single stock."""
        service = RiskAssessmentService()
        
        single_stock_portfolio = [
            (create_test_stock("SINGL", 100.00, "A", "Technology"), Quantity(10))
        ]
        prices = create_test_prices(single_stock_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(single_stock_portfolio, prices)
        
        # Should assess as high risk due to concentration (< 5 positions)
        assert portfolio_risk.portfolio_metrics.overall_risk_level == RiskLevel.HIGH
        assert len(portfolio_risk.individual_stock_risks) == 1

    def test_portfolio_metrics_requires_attention_property(self):
        """Should correctly identify when portfolio requires attention."""
        service = RiskAssessmentService()
        
        # High risk portfolio
        aggressive_portfolio = create_aggressive_portfolio()
        prices = create_test_prices(aggressive_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(aggressive_portfolio, prices)
        
        # Check if requires_attention property works
        requires_attention = portfolio_risk.portfolio_metrics.requires_attention
        
        # Should require attention if high risk or critical concentrations
        if portfolio_risk.portfolio_metrics.overall_risk_level in [RiskLevel.HIGH, RiskLevel.VERY_HIGH]:
            assert requires_attention is True
        
        # Check for critical concentrations
        critical_concentrations = [
            r for r in portfolio_risk.portfolio_metrics.concentration_risks
            if r.concentration_level == ConcentrationLevel.CRITICAL
        ]
        if critical_concentrations:
            assert requires_attention is True

    def test_get_highest_risk_stocks(self):
        """Should identify highest risk stocks in portfolio."""
        service = RiskAssessmentService()
        
        # Mix of high and low risk stocks
        mixed_portfolio = [
            (create_test_stock("SAFE", 100.00, "A", "Utilities", 0.10, 0.7), Quantity(10)),
            (create_test_stock("RISKY1", 100.00, "C", "Technology", 0.60, 2.0), Quantity(10)),
            (create_test_stock("RISKY2", 100.00, "C", "Biotech", 0.70, 2.5), Quantity(10)),
            (create_test_stock("MODER", 100.00, "B", "Energy", 0.25, 1.2), Quantity(10)),
        ]
        prices = create_test_prices(mixed_portfolio)
        
        portfolio_risk = service.assess_portfolio_risk(mixed_portfolio, prices)
        
        # Get highest risk stocks
        highest_risk_stocks = portfolio_risk.get_highest_risk_stocks(limit=2)
        
        assert len(highest_risk_stocks) == 2
        # Should be sorted by risk score (highest first)
        assert highest_risk_stocks[0].risk_score >= highest_risk_stocks[1].risk_score
        
        # The riskiest stocks should be RISKY1 and RISKY2
        risky_symbols = {str(stock.symbol) for stock in highest_risk_stocks}
        assert "RISKY1" in risky_symbols or "RISKY2" in risky_symbols